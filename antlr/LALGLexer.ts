// Generated from ./antlr/LALGLexer.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class LALGLexer extends Lexer {
	public static readonly COMENTARIO = 1;
	public static readonly COMENTARIO_MULTI = 2;
	public static readonly WS = 3;
	public static readonly PROGRAM = 4;
	public static readonly BEGIN = 5;
	public static readonly END = 6;
	public static readonly VAR = 7;
	public static readonly PROCEDURE = 8;
	public static readonly INT_TIPO = 9;
	public static readonly FLOAT_TIPO = 10;
	public static readonly BOOL_TIPO = 11;
	public static readonly READ = 12;
	public static readonly WRITE = 13;
	public static readonly TRUE_CONST = 14;
	public static readonly FALSE_CONST = 15;
	public static readonly IF = 16;
	public static readonly THEN = 17;
	public static readonly ELSE = 18;
	public static readonly WHILE = 19;
	public static readonly DO = 20;
	public static readonly NOT = 21;
	public static readonly ATRIBUICAO = 22;
	public static readonly MAIS = 23;
	public static readonly MENOS = 24;
	public static readonly MULT = 25;
	public static readonly DIV = 26;
	public static readonly IGUAL = 27;
	public static readonly DIFERENTE = 28;
	public static readonly MAIOR_IGUAL = 29;
	public static readonly MENOR_IGUAL = 30;
	public static readonly MAIOR = 31;
	public static readonly MENOR = 32;
	public static readonly ABRE_PARENTESES = 33;
	public static readonly FECHA_PARENTESES = 34;
	public static readonly ABRE_COLCHETES = 35;
	public static readonly FECHA_COLCHETES = 36;
	public static readonly VIRGULA = 37;
	public static readonly PONTO_VIRGULA = 38;
	public static readonly DOIS_PONTOS = 39;
	public static readonly PONTO = 40;
	public static readonly AND = 41;
	public static readonly OR = 42;
	public static readonly ID = 43;
	public static readonly INT = 44;
	public static readonly FLOAT = 45;
	public static readonly INVALID_TOKEN = 46;
	public static readonly INVALID = 47;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            "'program'", 
                                                            "'begin'", "'end'", 
                                                            "'var'", "'procedure'", 
                                                            "'int'", "'float'", 
                                                            "'boolean'", 
                                                            "'read'", "'write'", 
                                                            "'true'", "'false'", 
                                                            "'if'", "'then'", 
                                                            "'else'", "'while'", 
                                                            "'do'", "'not'", 
                                                            "':='", "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'='", 
                                                            "'<>'", "'>='", 
                                                            "'<='", "'>'", 
                                                            "'<'", "'('", 
                                                            "')'", "'['", 
                                                            "']'", "','", 
                                                            "';'", "':'", 
                                                            "'.'", "'and'", 
                                                            "'or'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "COMENTARIO", 
                                                             "COMENTARIO_MULTI", 
                                                             "WS", "PROGRAM", 
                                                             "BEGIN", "END", 
                                                             "VAR", "PROCEDURE", 
                                                             "INT_TIPO", 
                                                             "FLOAT_TIPO", 
                                                             "BOOL_TIPO", 
                                                             "READ", "WRITE", 
                                                             "TRUE_CONST", 
                                                             "FALSE_CONST", 
                                                             "IF", "THEN", 
                                                             "ELSE", "WHILE", 
                                                             "DO", "NOT", 
                                                             "ATRIBUICAO", 
                                                             "MAIS", "MENOS", 
                                                             "MULT", "DIV", 
                                                             "IGUAL", "DIFERENTE", 
                                                             "MAIOR_IGUAL", 
                                                             "MENOR_IGUAL", 
                                                             "MAIOR", "MENOR", 
                                                             "ABRE_PARENTESES", 
                                                             "FECHA_PARENTESES", 
                                                             "ABRE_COLCHETES", 
                                                             "FECHA_COLCHETES", 
                                                             "VIRGULA", 
                                                             "PONTO_VIRGULA", 
                                                             "DOIS_PONTOS", 
                                                             "PONTO", "AND", 
                                                             "OR", "ID", 
                                                             "INT", "FLOAT", 
                                                             "INVALID_TOKEN", 
                                                             "INVALID" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"COMENTARIO", "COMENTARIO_MULTI", "WS", "PROGRAM", "BEGIN", "END", "VAR", 
		"PROCEDURE", "INT_TIPO", "FLOAT_TIPO", "BOOL_TIPO", "READ", "WRITE", "TRUE_CONST", 
		"FALSE_CONST", "IF", "THEN", "ELSE", "WHILE", "DO", "NOT", "ATRIBUICAO", 
		"MAIS", "MENOS", "MULT", "DIV", "IGUAL", "DIFERENTE", "MAIOR_IGUAL", "MENOR_IGUAL", 
		"MAIOR", "MENOR", "ABRE_PARENTESES", "FECHA_PARENTESES", "ABRE_COLCHETES", 
		"FECHA_COLCHETES", "VIRGULA", "PONTO_VIRGULA", "DOIS_PONTOS", "PONTO", 
		"AND", "OR", "LETRA", "DIGITO", "ID", "INT", "FLOAT", "INVALID_TOKEN", 
		"INVALID",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, LALGLexer._ATN, LALGLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "LALGLexer.g4"; }

	public get literalNames(): (string | null)[] { return LALGLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return LALGLexer.symbolicNames; }
	public get ruleNames(): string[] { return LALGLexer.ruleNames; }

	public get serializedATN(): number[] { return LALGLexer._serializedATN; }

	public get channelNames(): string[] { return LALGLexer.channelNames; }

	public get modeNames(): string[] { return LALGLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,47,310,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,5,0,104,8,0,10,0,12,0,
	107,9,0,1,0,1,0,1,1,1,1,5,1,113,8,1,10,1,12,1,116,9,1,1,1,1,1,1,1,1,1,1,
	2,4,2,123,8,2,11,2,12,2,124,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
	1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
	1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
	10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,
	15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
	1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
	22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
	1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
	35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,
	1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,5,44,283,8,44,10,44,12,44,286,9,
	44,1,45,4,45,289,8,45,11,45,12,45,290,1,46,4,46,294,8,46,11,46,12,46,295,
	1,46,1,46,4,46,300,8,46,11,46,12,46,301,1,47,4,47,305,8,47,11,47,12,47,
	306,1,48,1,48,2,114,306,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,0,89,43,91,44,
	93,45,95,46,97,47,1,0,4,2,0,10,10,13,13,3,0,9,10,13,13,32,32,3,0,65,90,
	95,95,97,122,1,0,48,57,316,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
	0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
	1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,89,
	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,
	0,3,110,1,0,0,0,5,122,1,0,0,0,7,128,1,0,0,0,9,136,1,0,0,0,11,142,1,0,0,
	0,13,146,1,0,0,0,15,150,1,0,0,0,17,160,1,0,0,0,19,164,1,0,0,0,21,170,1,
	0,0,0,23,178,1,0,0,0,25,183,1,0,0,0,27,189,1,0,0,0,29,194,1,0,0,0,31,200,
	1,0,0,0,33,203,1,0,0,0,35,208,1,0,0,0,37,213,1,0,0,0,39,219,1,0,0,0,41,
	222,1,0,0,0,43,226,1,0,0,0,45,229,1,0,0,0,47,231,1,0,0,0,49,233,1,0,0,0,
	51,235,1,0,0,0,53,237,1,0,0,0,55,239,1,0,0,0,57,242,1,0,0,0,59,245,1,0,
	0,0,61,248,1,0,0,0,63,250,1,0,0,0,65,252,1,0,0,0,67,254,1,0,0,0,69,256,
	1,0,0,0,71,258,1,0,0,0,73,260,1,0,0,0,75,262,1,0,0,0,77,264,1,0,0,0,79,
	266,1,0,0,0,81,268,1,0,0,0,83,272,1,0,0,0,85,275,1,0,0,0,87,277,1,0,0,0,
	89,279,1,0,0,0,91,288,1,0,0,0,93,293,1,0,0,0,95,304,1,0,0,0,97,308,1,0,
	0,0,99,100,5,47,0,0,100,101,5,47,0,0,101,105,1,0,0,0,102,104,8,0,0,0,103,
	102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,
	0,0,107,105,1,0,0,0,108,109,6,0,0,0,109,2,1,0,0,0,110,114,5,123,0,0,111,
	113,9,0,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,115,1,0,0,0,114,112,1,0,
	0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,125,0,0,118,119,1,0,0,0,119,
	120,6,1,0,0,120,4,1,0,0,0,121,123,7,1,0,0,122,121,1,0,0,0,123,124,1,0,0,
	0,124,122,1,0,0,0,124,125,1,0,0,0,125,126,1,0,0,0,126,127,6,2,0,0,127,6,
	1,0,0,0,128,129,5,112,0,0,129,130,5,114,0,0,130,131,5,111,0,0,131,132,5,
	103,0,0,132,133,5,114,0,0,133,134,5,97,0,0,134,135,5,109,0,0,135,8,1,0,
	0,0,136,137,5,98,0,0,137,138,5,101,0,0,138,139,5,103,0,0,139,140,5,105,
	0,0,140,141,5,110,0,0,141,10,1,0,0,0,142,143,5,101,0,0,143,144,5,110,0,
	0,144,145,5,100,0,0,145,12,1,0,0,0,146,147,5,118,0,0,147,148,5,97,0,0,148,
	149,5,114,0,0,149,14,1,0,0,0,150,151,5,112,0,0,151,152,5,114,0,0,152,153,
	5,111,0,0,153,154,5,99,0,0,154,155,5,101,0,0,155,156,5,100,0,0,156,157,
	5,117,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,16,1,0,0,0,160,161,5,
	105,0,0,161,162,5,110,0,0,162,163,5,116,0,0,163,18,1,0,0,0,164,165,5,102,
	0,0,165,166,5,108,0,0,166,167,5,111,0,0,167,168,5,97,0,0,168,169,5,116,
	0,0,169,20,1,0,0,0,170,171,5,98,0,0,171,172,5,111,0,0,172,173,5,111,0,0,
	173,174,5,108,0,0,174,175,5,101,0,0,175,176,5,97,0,0,176,177,5,110,0,0,
	177,22,1,0,0,0,178,179,5,114,0,0,179,180,5,101,0,0,180,181,5,97,0,0,181,
	182,5,100,0,0,182,24,1,0,0,0,183,184,5,119,0,0,184,185,5,114,0,0,185,186,
	5,105,0,0,186,187,5,116,0,0,187,188,5,101,0,0,188,26,1,0,0,0,189,190,5,
	116,0,0,190,191,5,114,0,0,191,192,5,117,0,0,192,193,5,101,0,0,193,28,1,
	0,0,0,194,195,5,102,0,0,195,196,5,97,0,0,196,197,5,108,0,0,197,198,5,115,
	0,0,198,199,5,101,0,0,199,30,1,0,0,0,200,201,5,105,0,0,201,202,5,102,0,
	0,202,32,1,0,0,0,203,204,5,116,0,0,204,205,5,104,0,0,205,206,5,101,0,0,
	206,207,5,110,0,0,207,34,1,0,0,0,208,209,5,101,0,0,209,210,5,108,0,0,210,
	211,5,115,0,0,211,212,5,101,0,0,212,36,1,0,0,0,213,214,5,119,0,0,214,215,
	5,104,0,0,215,216,5,105,0,0,216,217,5,108,0,0,217,218,5,101,0,0,218,38,
	1,0,0,0,219,220,5,100,0,0,220,221,5,111,0,0,221,40,1,0,0,0,222,223,5,110,
	0,0,223,224,5,111,0,0,224,225,5,116,0,0,225,42,1,0,0,0,226,227,5,58,0,0,
	227,228,5,61,0,0,228,44,1,0,0,0,229,230,5,43,0,0,230,46,1,0,0,0,231,232,
	5,45,0,0,232,48,1,0,0,0,233,234,5,42,0,0,234,50,1,0,0,0,235,236,5,47,0,
	0,236,52,1,0,0,0,237,238,5,61,0,0,238,54,1,0,0,0,239,240,5,60,0,0,240,241,
	5,62,0,0,241,56,1,0,0,0,242,243,5,62,0,0,243,244,5,61,0,0,244,58,1,0,0,
	0,245,246,5,60,0,0,246,247,5,61,0,0,247,60,1,0,0,0,248,249,5,62,0,0,249,
	62,1,0,0,0,250,251,5,60,0,0,251,64,1,0,0,0,252,253,5,40,0,0,253,66,1,0,
	0,0,254,255,5,41,0,0,255,68,1,0,0,0,256,257,5,91,0,0,257,70,1,0,0,0,258,
	259,5,93,0,0,259,72,1,0,0,0,260,261,5,44,0,0,261,74,1,0,0,0,262,263,5,59,
	0,0,263,76,1,0,0,0,264,265,5,58,0,0,265,78,1,0,0,0,266,267,5,46,0,0,267,
	80,1,0,0,0,268,269,5,97,0,0,269,270,5,110,0,0,270,271,5,100,0,0,271,82,
	1,0,0,0,272,273,5,111,0,0,273,274,5,114,0,0,274,84,1,0,0,0,275,276,7,2,
	0,0,276,86,1,0,0,0,277,278,7,3,0,0,278,88,1,0,0,0,279,284,3,85,42,0,280,
	283,3,85,42,0,281,283,3,87,43,0,282,280,1,0,0,0,282,281,1,0,0,0,283,286,
	1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,90,1,0,0,0,286,284,1,0,0,0,
	287,289,3,87,43,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,
	1,0,0,0,291,92,1,0,0,0,292,294,3,87,43,0,293,292,1,0,0,0,294,295,1,0,0,
	0,295,293,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,299,5,46,0,0,298,
	300,3,87,43,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,1,
	0,0,0,302,94,1,0,0,0,303,305,3,97,48,0,304,303,1,0,0,0,305,306,1,0,0,0,
	306,307,1,0,0,0,306,304,1,0,0,0,307,96,1,0,0,0,308,309,9,0,0,0,309,98,1,
	0,0,0,10,0,105,114,124,282,284,290,295,301,306,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LALGLexer.__ATN) {
			LALGLexer.__ATN = new ATNDeserializer().deserialize(LALGLexer._serializedATN);
		}

		return LALGLexer.__ATN;
	}


	static DecisionsToDFA = LALGLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}